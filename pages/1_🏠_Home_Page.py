import pandas as pd
import streamlit as st
import duckdb
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout
st.set_page_config(page_title="Smart Rent BKK", page_icon="üåÜ", layout="wide")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å duckdb
@st.cache_data
def load_data_from_duckdb():
    con = duckdb.connect("condo.duckdb")
    df = con.execute("SELECT * FROM condo").df()
    con.close()
    return df

#‡∏™‡∏£‡πâ‡∏≤‡∏á Data Frame
df = load_data_from_duckdb()

# ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå
def convert_for_download(df):
    return df.to_csv(index=False).encode("utf-8")

# ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡πÅ‡∏™‡∏î‡∏á
def rating_to_stars(rating, max_stars=5):
    if pd.isna(rating):
        return "N/A"
    integer_part = int(rating)
    decimal_part = rating - integer_part
    full_stars = "‚≠ê" * integer_part
    half_star = "¬Ω" if decimal_part >= 0.5 else ""
    empty_stars = "‚òÜ" * (max_stars - integer_part - (1 if decimal_part >= 0.5 else 0))
    return full_stars + half_star + empty_stars

# === MAIN PAGE ===
def main_page():
    #status = create_duckdb_from_csv()
    #df = load_data_from_duckdb()

    st.title("Smart Rent BKK üåÜ")
    #st.caption("(Data source: DuckDB)")

    st.text("‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ä‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á! ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AI ‡∏™‡∏∏‡∏î‡∏•‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏≠‡∏≤‡∏®‡∏±‡∏¢ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ!")
    

    st.image("https://raw.githubusercontent.com/ppitchaporn/DADS5001-Condo/a785a69fe796a14d3023d993a8c89289c4bd067a/Condo_image.jpg")

    st.caption("(Data source: DuckDB)")

    options = [5, 10, 25, 50, 100, "All"]
    selection_rows = st.pills("Select Top Rows:", options, selection_mode="single", default=5)
    st.markdown(f"Displaying {selection_rows} rows.")

    df_display = df.copy()
    if selection_rows != "All":
        df_display = df_display.head(int(selection_rows))

    df_display['Rating'] = df_display['star'].apply(rating_to_stars)

    st.dataframe(
        df_display,
        column_config={
            "Rating": st.column_config.Column("Rating", help="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", width="small"),
            "star": None
        },
        column_order=[
            "condo_name", "Rating", "rent_cd_address", "rent_cd_price",
            "rent_cd_bed", "rent_cd_bath", "rent_cd_features_station",
            "near_rail_meter", "rent_cd_features_time"
        ],
        hide_index=True
    )

    # Download button
    csv = convert_for_download(df)
    st.download_button("Download CSV", data=csv, file_name="data.csv", mime="text/csv")

    # Footer
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Name")
        st.write("Mr.Kitisak Namtae")
        st.write("Mr.Kantapong Charusiri")
        st.write("Miss Pitchaporn Nimdum")
        st.write("Miss Pornchanok Tuntikulwattanakit")
        st.write("Mr.Suparerk Jankam")
    with col2:
        st.subheader("ID")
        st.write("6710422007")
        st.write("6710422015")
        st.write("6710422016")
        st.write("6710422023")
        st.write("6710422028")

    st.subheader("Rate Us")
    sentiment_mapping = ["one", "two", "three", "four", "five"]
    selected = st.feedback("stars")
    if selected is not None:
        st.markdown(f"You selected {sentiment_mapping[selected]} star(s). \n Thank You. üòä")

# === Page navigation ===
#home_page = st.Page(main_page, title='Home page', icon=":material/home:")
#descipt = st.Page("page2.py", title='Descriptive Analysis', icon=":material/database:")
#relation_predict = st.Page("page3.py", title='Relationship Analysis & Price Prediction', icon=":material/bar_chart:")
#geospatial_class = st.Page("page4.py", title='Geospatial Analysis & Classification Result', icon=":material/bar_chart:")
#Ai_search = st.Page("page5.py", title=' Advanced Search & Comparison', icon=":material/note:")

#pg = st.navigation({"Menu": [home_page, descipt, relation_predict, geospatial_class, Ai_search]})
#pg.run()

# === MAIN ===
if __name__ == '__main__':
    main_page()
